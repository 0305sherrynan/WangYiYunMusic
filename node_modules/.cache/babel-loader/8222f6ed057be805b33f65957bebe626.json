{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport playMiddle from '../assets/img/播放2.png';\nimport lastSong from '../assets/img/上一首.png';\nimport nextSong from '../assets/img/下一首.png';\nimport stop from '../assets/img/暂停.png';\nimport volume from '../assets/img/音量.png';\nimport Pubsub from 'pubsub-js'; //引入消息订阅与发布\n\nexport default {\n  name: 'Footer',\n\n  data() {\n    return {\n      //图片\n      playMiddle,\n      lastSong,\n      nextSong,\n      stop,\n      volume,\n      // 暂停和播放图片的控制\n      isplay: false,\n      // musicURL:this.$store.state.musicUrl\n      //拖拽条\n      progress: 0,\n      customColor: '#409eff',\n      currentTime: 0,\n      duration: 0,\n      //订阅与发布传输过来的所有歌曲信息--对象数组\n      songs: [],\n      //订阅与发布传输过来的所有歌曲信息--当前播放歌曲的ID\n      songsID: 0,\n      // 订阅与发布传输过来的所有歌曲信息--当前播放歌曲的br\n      songsBr: 0,\n      // 当前播放歌曲的下标序列\n      currentIDIndex: 0,\n      // 左侧图片的url\n      picURL: '',\n      // 歌曲名字\n      songName: '',\n      // 歌曲作者\n      songAuthor: '',\n      // 音量大小,并设置默认为20\n      volumeSize: 20\n    };\n  },\n\n  methods: {\n    // 控制暂停播放\n    playMusic() {\n      //  const audio = window.document.querySelector('.musicAudio') //获取audio元素\n      //  console.log(audio)\n      if (this.audio.paused == true) {\n        //目前音频处于暂停状态，转为播放状态\n        this.audio.play();\n      } else this.audio.pause(); //目前音频处于播放状态，转为暂停状态\n\n\n      this.isplay = !this.isplay; //图片切换\n    },\n\n    percentageChange() {\n      //拖拽条动态变化\n      var filters = this.$options.filters; //获取全局过滤器\n\n      this.duration = filters.dataFormat1(this.audio.duration * 1000); //获取总时长\n\n      this.currentTime = filters.dataFormat1(this.audio.currentTime * 1000); //动态获取当前时间\n\n      if (this.audio.duration !== NaN) this.progress = this.audio.currentTime / this.audio.duration * 100; // 拖拽条随着timeupdate事件的发生而改变\n\n      if (this.audio.currentTime >= this.audio.duration) //当前播放已结束，播放下一首歌\n        {\n          console.log(11);\n          this.nextSongStart();\n        } //  console.log(this.percentage)\n\n    },\n\n    async lastSongStart() {\n      //播放上一歌曲\n      if (this.$store.state.choice == 1) Pubsub.publish('lastornext', [this.songs[this.currentIDIndex - 1].id, this.songs[this.currentIDIndex - 1].dt]);\n    },\n\n    async nextSongStart() {\n      //播放下一歌曲\n      if (this.$store.state.choice == 1) Pubsub.publish('lastornext', [this.songs[this.currentIDIndex + 1].id, this.songs[this.currentIDIndex = 1].dt]);\n    },\n\n    volumeChange(currentValue) {\n      //滑动音量时改变（隐藏事件：一开始刷新时居然会执行一次）\n      // console.log(1)\n      this.audio.volume = currentValue / 100;\n      this.volumeSize = this.audio.volume * 100;\n    },\n\n    sliderChange() {\n      //拖拽进度条，音乐进度改变\n      this.audio.currentTime = this.progress / 100 * this.audio.duration;\n    } // autoNextSong(){   //自动播放下一首歌\n    // }\n\n\n  },\n\n  mounted() {\n    // 暂停\n    Pubsub.subscribe('stop', (msgName, data) => {\n      this.isplay = false;\n    }); // 正在播放\n\n    Pubsub.subscribe('songDetail', (msgName, data) => {\n      this.isplay = true; // console.log(typeof(this.audio.currentTime/this.audio.duration))\n      // console.log(this.percentage)\n    }); //传送歌单所有歌曲的信息，用于循环播放、上、下播放\n\n    Pubsub.subscribe('tranferSongs', async (msgName, data) => {\n      this.songs = data[0]; //考虑是点击轮播图播放，没有上一首\n\n      console.log(this.songs);\n      this.songsID = data[1];\n      this.songsBr = data[2];\n\n      if (this.$store.state.choice == 1) {\n        //从列表点击的歌\n        this.currentIDIndex = await this.songs.findIndex(currentValue => {\n          return currentValue.id == this.songsID;\n        });\n      } else if (this.$store.state.choice == 2) {\n        //从banner点击的歌\n        this.currentIDIndex = await this.songs.findIndex(currentValue => {\n          return currentValue.targetId == this.songsID;\n        });\n      }\n\n      console.log(this.songs[this.currentIDIndex]);\n      let arr = Object.keys(this.songs[this.currentIDIndex]); // true\n\n      if (arr.includes('al') == true) {\n        this.picURL = this.songs[this.currentIDIndex].al.picUrl;\n        this.songName = this.songs[this.currentIDIndex].name;\n        this.songAuthor = this.songs[this.currentIDIndex].ar[0].name;\n      } else this.picURL = this.songs[this.currentIDIndex].imageUrl; //轮播图点击\n\n    });\n  },\n\n  computed: {\n    audio() {\n      //动态获取audio标签\n      return window.document.querySelector('.musicAudio');\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAqCA;AACA;AACA;AACA;AACA;AACA,+B,CAAA;;AACA;EACAA,cADA;;EAEAC;IACA;MACA;MACAC,UAFA;MAGAC,QAHA;MAIAC,QAJA;MAKAC,IALA;MAMAC,MANA;MAOA;MACAC,aARA;MASA;MACA;MACAC,WAXA;MAYAC,sBAZA;MAaAC,cAbA;MAcAC,WAdA;MAeA;MACAC,SAhBA;MAiBA;MACAC,UAlBA;MAmBA;MACAC,UApBA;MAqBA;MACAC,iBAtBA;MAuBA;MACAC,UAxBA;MAyBA;MACAC,YA1BA;MA2BA;MACAC,cA5BA;MA6BA;MACAC;IA9BA;EAgCA,CAnCA;;EAoCAC;IACA;IACAC;MACA;MACA;MACA;QAAA;QACA;MAEA,CAHA,MAIA,mBAPA,CAOA;;;MACA,2BARA,CAQA;IACA,CAXA;;IAYAC;MAAA;MAEA,oCAFA,CAEA;;MACA,gEAHA,CAGA;;MACA,sEAJA,CAIA;;MACA,iCACA,mEANA,CAMA;;MACA;QACA;UACAC;UACA;QACA,CAXA,CAaA;;IACA,CA1BA;;IA2BA;MAAA;MACA;IACA,CA7BA;;IA8BA;MAAA;MACA;IACA,CAhCA;;IAiCAC;MAAA;MACA;MACA;MACA;IAEA,CAtCA;;IAuCAC;MAAA;MACA;IACA,CAzCA,CA0CA;IAEA;;;EA5CA,CApCA;;EAmFAC;IACA;IACAC;MACA;IACA,CAFA,EAFA,CAKA;;IACAA;MACA,mBADA,CAEA;MACA;IACA,CAJA,EANA,CAWA;;IACAA;MACA,qBADA,CACA;;MACAJ;MACA;MACA;;MACA;QAAA;QACA;UACA;QACA,CAFA;MAGA,CAJA,MAKA;QAAA;QACA;UACA;QACA,CAFA;MAGA;;MACAA;MACA,uDAhBA,CAiBA;;MACA,gCACA;QACA;QACA;QACA;MACA,CALA,MAMA,uDAxBA,CAwBA;;IACA,CAzBA;EA0BA,CAzHA;;EA0HAK;IACAC;MAAA;MACA;IACA;;EAHA;AA1HA","names":["name","data","playMiddle","lastSong","nextSong","stop","volume","isplay","progress","customColor","currentTime","duration","songs","songsID","songsBr","currentIDIndex","picURL","songName","songAuthor","volumeSize","methods","playMusic","percentageChange","console","volumeChange","sliderChange","mounted","Pubsub","computed","audio"],"sourceRoot":"src/mainview","sources":["Footer.vue"],"sourcesContent":["<template>\r\n  <div class=\"bigBox\">\r\n    <el-row>\r\n        <el-col :span=\"8\" class=\"leftBox\">\r\n            <div v-if=\"picURL!=''\" class=\"leftImg\">\r\n                 <img  :src=\"picURL\" alt=\"\">\r\n            </div>\r\n            <div class=\"leftText\">\r\n                <span class=\"leftText_first\">{{songName}}</span>\r\n                <span class=\"leftText_seconed\">{{songAuthor}}</span>\r\n            </div>\r\n        </el-col>\r\n        <el-col :span=\"2\" class=\"count\"><span class=\"spanStyle\">{{currentTime}}</span></el-col>\r\n        <el-col :span=\"4\" class=\"middleControls\">\r\n            <div class=\"middleBoxHead\">\r\n                <img :src=\"this.lastSong\" alt=\"\" @click=\"lastSongStart\">\r\n                <img :src=\"this.playMiddle\" alt=\"\" @click=\"playMusic\"  v-if=\"!this.isplay\">\r\n                <img :src=\"this.stop\" @click=\"playMusic\" alt=\"\" v-else>\r\n                <img :src=\"this.nextSong\" alt=\"\" @click=\"nextSongStart \">\r\n            </div>\r\n            <div class=\"middleBoxBottom\">\r\n                <el-slider v-model=\"progress\" @change=\"sliderChange()\"></el-slider>\r\n            </div>\r\n        </el-col>\r\n        <el-col :span=\"2\" class=\"count\"> <span class=\"spanStyle\">{{duration}}</span></el-col>\r\n        <el-col :span=\"8\" class=\"rightbox\">\r\n            <div class=\"rightdiv\">\r\n                <img :src=\"volume\" alt=\"\">\r\n                <el-slider vertical height=\"2rem\" class=\"verticalSilder\" v-model=\"volumeSize\" @input=\"volumeChange\"></el-slider>\r\n            </div>\r\n        </el-col>\r\n    </el-row>\r\n    <audio :src=\"this.$store.state.musicUrl\" class=\"musicAudio\"  autoplay @timeupdate=\"percentageChange\" ></audio>\r\n  </div> \r\n</template>\r\n\r\n<script>\r\nimport playMiddle from '../assets/img/播放2.png'\r\nimport lastSong from '../assets/img/上一首.png'\r\nimport nextSong from '../assets/img/下一首.png'\r\nimport stop from '../assets/img/暂停.png'\r\nimport volume from '../assets/img/音量.png'\r\nimport Pubsub from 'pubsub-js' //引入消息订阅与发布\r\nexport default {\r\n    name:'Footer',\r\n    data(){\r\n        return{\r\n            //图片\r\n            playMiddle,\r\n            lastSong,\r\n            nextSong,\r\n            stop,\r\n            volume,\r\n            // 暂停和播放图片的控制\r\n            isplay:false,\r\n            // musicURL:this.$store.state.musicUrl\r\n            //拖拽条\r\n            progress:0,\r\n            customColor:'#409eff',\r\n            currentTime:0,\r\n            duration:0,\r\n            //订阅与发布传输过来的所有歌曲信息--对象数组\r\n            songs:[],\r\n            //订阅与发布传输过来的所有歌曲信息--当前播放歌曲的ID\r\n            songsID:0,\r\n            // 订阅与发布传输过来的所有歌曲信息--当前播放歌曲的br\r\n            songsBr:0,\r\n            // 当前播放歌曲的下标序列\r\n            currentIDIndex:0,\r\n            // 左侧图片的url\r\n            picURL:'',\r\n            // 歌曲名字\r\n            songName:'',\r\n            // 歌曲作者\r\n            songAuthor:'',\r\n            // 音量大小,并设置默认为20\r\n            volumeSize:20\r\n        }\r\n    },\r\n    methods:{\r\n        // 控制暂停播放\r\n         playMusic(){\r\n            //  const audio = window.document.querySelector('.musicAudio') //获取audio元素\r\n            //  console.log(audio)\r\n             if(this.audio.paused==true){  //目前音频处于暂停状态，转为播放状态\r\n                this.audio.play()\r\n                \r\n             }\r\n             else this.audio.pause()  //目前音频处于播放状态，转为暂停状态\r\n             this.isplay=!this.isplay  //图片切换\r\n        },\r\n        percentageChange(){  //拖拽条动态变化\r\n\r\n                    var filters=this.$options.filters   //获取全局过滤器\r\n                    this.duration=filters.dataFormat1(this.audio.duration*1000) //获取总时长\r\n                    this.currentTime=filters.dataFormat1(this.audio.currentTime*1000)  //动态获取当前时间\r\n                    if(this.audio.duration !== NaN)\r\n                    this.progress=this.audio.currentTime/this.audio.duration*100 // 拖拽条随着timeupdate事件的发生而改变\r\n                    if(this.audio.currentTime>=this.audio.duration) //当前播放已结束，播放下一首歌\r\n                    {   \r\n                        console.log(11)\r\n                        this.nextSongStart()\r\n                    }\r\n            \r\n            //  console.log(this.percentage)\r\n        },\r\n        async lastSongStart(){  //播放上一歌曲\r\n            if(this.$store.state.choice==1) Pubsub.publish('lastornext',[this.songs[this.currentIDIndex-1].id,this.songs[this.currentIDIndex-1].dt])\r\n        },\r\n        async nextSongStart(){  //播放下一歌曲\r\n            if(this.$store.state.choice==1) Pubsub.publish('lastornext',[this.songs[this.currentIDIndex+1].id,this.songs[this.currentIDIndex=1].dt])\r\n        },\r\n        volumeChange(currentValue){  //滑动音量时改变（隐藏事件：一开始刷新时居然会执行一次）\r\n            // console.log(1)\r\n            this.audio.volume=currentValue/100\r\n            this.volumeSize=this.audio.volume*100\r\n\r\n        },\r\n        sliderChange(){   //拖拽进度条，音乐进度改变\r\n            this.audio.currentTime = this.progress/100*this.audio.duration\r\n        }\r\n        // autoNextSong(){   //自动播放下一首歌\r\n\r\n        // }\r\n\r\n    },\r\n    mounted(){\r\n        // 暂停\r\n        Pubsub.subscribe('stop',(msgName,data)=>{\r\n            this.isplay=false\r\n        })\r\n        // 正在播放\r\n        Pubsub.subscribe('songDetail',(msgName,data)=>{\r\n            this.isplay=true\r\n            // console.log(typeof(this.audio.currentTime/this.audio.duration))\r\n            // console.log(this.percentage)\r\n        })\r\n        //传送歌单所有歌曲的信息，用于循环播放、上、下播放\r\n        Pubsub.subscribe('tranferSongs',async (msgName,data)=>{\r\n              this.songs=data[0]  //考虑是点击轮播图播放，没有上一首\r\n            console.log(this.songs)\r\n            this.songsID=data[1]\r\n            this.songsBr=data[2]\r\n             if(this.$store.state.choice == 1){  //从列表点击的歌\r\n            this.currentIDIndex = await this.songs.findIndex((currentValue)=>{\r\n                return currentValue.id==this.songsID\r\n            })\r\n             }\r\n             else if(this.$store.state.choice==2){//从banner点击的歌\r\n                            this.currentIDIndex = await this.songs.findIndex((currentValue)=>{\r\n                return currentValue.targetId==this.songsID\r\n            })\r\n             }\r\n            console.log(this.songs[this.currentIDIndex])\r\n            let arr = Object.keys(this.songs[this.currentIDIndex])\r\n              // true\r\n            if(arr.includes('al') ==true)  \r\n            {\r\n                this.picURL = this.songs[this.currentIDIndex].al.picUrl\r\n                this.songName=this.songs[this.currentIDIndex].name\r\n             this.songAuthor=this.songs[this.currentIDIndex].ar[0].name\r\n            }\r\n            else  this.picURL=this.songs[this.currentIDIndex].imageUrl//轮播图点击\r\n        })\r\n    },\r\n    computed:{\r\n        audio(){ //动态获取audio标签\r\n            return window.document.querySelector('.musicAudio')\r\n        },\r\n\r\n\r\n        \r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 左侧 */\r\n.leftBox{\r\n    text-align: left;\r\n}\r\n.leftImg{\r\n    display: inline-block;\r\n    width: 1.5rem;\r\n    height:1.5rem;\r\n    /* text-align: left; */\r\n}\r\n.leftImg>img{\r\n    /* display: inline-block; */\r\n    width:1.5rem;\r\n    height: 1.5rem;\r\n    position: relative;\r\n    top: 0.2rem;\r\n}\r\n.leftText{\r\n    display: inline-block;\r\n    margin-left: .2rem;\r\n}\r\n.leftText>span{\r\n    display: block;\r\n}\r\n.leftText_first{\r\n    font-size: .6rem;\r\n    color: rgb(206, 206, 207);\r\n}\r\n.leftText_seconed{\r\n    font-size: .4rem;\r\n    color: rgb(206, 206, 207);\r\n}\r\n/* 中间按钮和拖拽条 */\r\n.middleControls img{\r\n    width: 1rem;\r\n    height: 1rem;\r\n}\r\n\r\n.middleBoxHead{\r\n    height: .8rem;\r\n}\r\n.middleBoxBottom{\r\n    height: 1.2rem;\r\n}\r\n/* 两个计数 */\r\n.count{\r\n    position: relative;\r\n    top: .8rem;\r\n}\r\n.spanStyle{\r\n    font-size: .4rem;\r\n    color: rgb(88, 88, 91);\r\n    font-weight: 700;\r\n}\r\n/* 右侧 */\r\n.rightbox{\r\n    text-align: right;\r\n}\r\n.rightdiv{\r\n    display: inline-block;\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n\r\n}\r\n.rightdiv>img{\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n}\r\n.rightdiv:hover .verticalSilder{\r\n    display: block ;\r\n}\r\n.verticalSilder{\r\n    position: absolute;\r\n    top: -4.0rem;\r\n    right: -0.4rem;\r\n    /* display: none; */\r\n    width: 0.6rem;\r\n    background-color: rgb(37, 37, 37);\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}