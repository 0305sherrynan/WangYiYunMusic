{"ast":null,"code":"import Pubsub from 'pubsub-js'; //引入消息订阅与发布\n\nexport default {\n  name: 'SongDetail',\n\n  data() {\n    return {\n      detailId: window.sessionStorage.getItem('songListId'),\n      // 从sessionStorage中获取所点击的歌单id\n      playlist: {// creator:{} <!--解决数据找不到报错-->\n      },\n      //用于存放单个歌单数据的对象\n      songs: []\n    };\n  },\n\n  methods: {\n    async getDetail() {\n      //获取单个歌单的列表信息\n      const {\n        data: res\n      } = await this.$http.get('/playlist/detail', {\n        //(解构赋值)获取具体id对应歌单列表信息\n        params: {\n          id: this.detailId\n        }\n      });\n      this.playlist = res.playlist;\n      const {\n        data: res_1\n      } = await this.$http.get('/playlist/track/all', {\n        params: {\n          id: this.detailId\n        }\n      });\n      this.songs = res_1.songs;\n      console.log(this.songs); // console.log(this.playlist)\n    },\n\n    tableRowClassName(_ref) {\n      let {\n        row,\n        rowIndex\n      } = _ref;\n\n      //设置table的样式\n      if (rowIndex % 2 === 0) {\n        // console.log(rowIndex)\n        return 'warning-row';\n      } else if (rowIndex % 2 === 1) {\n        return 'success-row';\n      }\n\n      return '';\n    },\n\n    // 双击歌曲触发事件\n    getMusicUrl(row) {\n      this.getMusicUrlNext(row.id, row.dt);\n    },\n\n    async getMusicUrlNext(id, br) {\n      Pubsub.publish('stop'); //先将middle图标设置为暂停\n\n      const res = await this.getMuslicGlobal(id, br);\n\n      if (res !== 'ok') {\n        this.$message('sorry'); //无法播放的情况\n      }\n\n      Pubsub.publish('songDetail'); //能够播放，则设置图标为正在播放\n    }\n\n  },\n\n  created() {\n    //路由创建时候执行\n    this.getDetail();\n  }\n\n};","map":{"version":3,"mappings":"AAwCA,+B,CAAA;;AACA;EACAA,kBADA;;EAEAC;IACA;MACAC,qDADA;MACA;MACAC,WACA;MADA,CAFA;MAIA;MACAC;IALA;EAOA,CAVA;;EAWAC;IACA;MAAA;MACA;QAAAJ;MAAA;QAAA;QACAK;UACAC;QADA;MADA;MAKA;MACA;QAAAN;MAAA;QACAK;UACAC;QADA;MADA;MAKA;MACAC,wBAbA,CAcA;IACA,CAhBA;;IAiBAC;MAAA;QAAAC;QAAAC;MAAA;;MAAA;MAEA;QACA;QACA;MACA,CAHA,MAGA;QACA;MACA;;MACA;IACA,CA1BA;;IA2BA;IACAC;MACA;IAEA,CA/BA;;IAgCA;MACAC,uBADA,CACA;;MACA;;MACA;QACA,uBADA,CACA;MACA;;MACAA,6BANA,CAMA;IACA;;EAvCA,CAXA;;EAqDAC;IAAA;IACA;EACA;;AAvDA","names":["name","data","detailId","playlist","songs","methods","params","id","console","tableRowClassName","row","rowIndex","getMusicUrl","Pubsub","created"],"sourceRoot":"src/components/songlistdetail","sources":["SongDetail.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"box-card\">\r\n        <div class=\"header\">\r\n            <div class=\"icon-wrap\"><img :src=\"playlist.backgroundCoverUrl\" alt=\"\" ></div>\r\n            <div class=\"context-wrap\">\r\n                <span>{{playlist.name}}</span>\r\n                <div v-if=\"playlist.creator\" class=\"creatorInfo\">   <!--解决数据找不到报错：用v-if控制是否渲染-->\r\n                    <img :src=\"playlist.creator.avatarUrl\" alt=\"\">\r\n                    <span class=\"creatoor\">{{playlist.creator.nickname}}</span>\r\n                    <span class=\"createTime\">{{playlist.createTime | dataFormat}} 创建</span>\r\n                </div>\r\n                <!--v-if让有数据了再统一显示-->\r\n                <p v-if=\"playlist.tags\"><span>标签：</span><el-tag v-for=\"(item,index) in playlist.tags\" :key=\"index\">{{item}}</el-tag></p>\r\n                <p v-if=\"playlist.description\"><span>简介：</span><span>{{playlist.description}}</span></p>\r\n            </div>\r\n        </div>\r\n        <div></div>\r\n    </el-card>\r\n    <el-card class=\"box-card bottom-card\">\r\n        <el-tabs>\r\n            <el-tab-pane label=\"歌单列表\" >\r\n                <el-table  :data=\"songs\" :row-class-name=\"tableRowClassName\" class=\"customer-table\" @row-dblclick=\"getMusicUrl\">\r\n                    <el-table-column label=\"歌名\" prop=\"name\"></el-table-column>\r\n                    <el-table-column label=\"歌手\" prop=\"ar[0].name\"></el-table-column>\r\n                    <el-table-column label=\"专辑\" >\r\n                        <template slot-scope=\"scope\" ><span class=\"singleStyle\">《{{scope.row.al.name}}》</span></template><!--使用插槽个性化-->\r\n                    </el-table-column>\r\n                    <el-table-column label=\"时长\" prop=\"dt\">\r\n                        <template slot-scope=\"scope\"><span class=\"singleStyle\">{{scope.row.dt | dataFormat1}}</span></template>  <!--使用插槽和全局过滤器-->\r\n                    </el-table-column>\r\n                </el-table>\r\n            </el-tab-pane>\r\n            <el-tab-pane label=\"评论\"></el-tab-pane>\r\n        </el-tabs>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Pubsub from 'pubsub-js' //引入消息订阅与发布\r\nexport default {\r\n    name:'SongDetail',\r\n    data(){\r\n        return{\r\n            detailId:window.sessionStorage.getItem('songListId'),// 从sessionStorage中获取所点击的歌单id\r\n            playlist:{\r\n                // creator:{} <!--解决数据找不到报错-->\r\n            }, //用于存放单个歌单数据的对象\r\n            songs:[]\r\n        }\r\n    },\r\n    methods:{\r\n        async getDetail(){                              //获取单个歌单的列表信息\r\n            const {data:res}=await this.$http.get('/playlist/detail',{            //(解构赋值)获取具体id对应歌单列表信息\r\n                params:{\r\n                        id:this.detailId\r\n                }\r\n            })\r\n            this.playlist=res.playlist\r\n            const {data:res_1}=await this.$http.get('/playlist/track/all',{\r\n                params:{\r\n                    id:this.detailId\r\n                }\r\n            })\r\n            this.songs=res_1.songs\r\n            console.log(this.songs)\r\n            // console.log(this.playlist)\r\n        },\r\n        tableRowClassName({row, rowIndex}) {   //设置table的样式\r\n            \r\n        if (rowIndex%2 === 0) {\r\n            // console.log(rowIndex)\r\n          return 'warning-row';\r\n        } else if (rowIndex%2 === 1) {\r\n          return 'success-row';\r\n        }\r\n        return '';\r\n        },\r\n        // 双击歌曲触发事件\r\n        getMusicUrl(row){\r\n            this.getMusicUrlNext(row.id,row.dt)\r\n            \r\n        },\r\n        async getMusicUrlNext(id,br){\r\n            Pubsub.publish('stop') //先将middle图标设置为暂停\r\n            const res= await this.getMuslicGlobal(id,br)\r\n            if(res!=='ok'){  \r\n                this.$message('sorry')   //无法播放的情况\r\n            }\r\n            Pubsub.publish('songDetail')  //能够播放，则设置图标为正在播放\r\n        }\r\n    \r\n    },\r\n    created(){   //路由创建时候执行\r\n        this.getDetail() \r\n    },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 歌单简介信息部分 */\r\n.box-card{\r\n        /* 设置大小 */\r\n    width: 1200px;\r\n    /* 设置居中 */\r\n    margin: 0 auto; \r\n    background-color: rgb(43,43,43);\r\n    /* 将自动生成的lineheight为0，让内容撑开 */\r\n    line-height: 0;  \r\n    color: rgb(208, 208, 208);\r\n    border: 0;\r\n}\r\n\r\n.header{\r\n        /* 设置为flex布局 */\r\n    display: flex;\r\n}\r\n/* 左大img */\r\n.icon-wrap>img{\r\n    width: 4.7rem;\r\n    height: 4.5rem;\r\n    border-radius: .3rem;\r\n    \r\n}\r\n/* 右区域 */\r\n.context-wrap{\r\n    /* header的右边设置为自上而下的flex布局 */\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.context-wrap>*{\r\n    margin-left: .4rem;\r\n}\r\n.context-wrap>span{\r\n/* 字体大小 */\r\n    font-size: .5rem;\r\n    /* 字体粗度 */\r\n    font-weight: 700;\r\n    /* 设置高度和居中 */\r\n        height: 1rem;\r\n    line-height: 1rem;\r\n    /* 设置margin */\r\n        margin-bottom: .4rem;\r\n}\r\n/* 作者信息 */\r\n.creatorInfo{\r\n    /* 设置高度和居中 */\r\n    height: 1rem;\r\n    line-height: 1rem;\r\n    /* 设置为flex布局 */\r\n        display: flex;\r\n    align-items: center;\r\n    flex-direction: row;\r\n\r\n}\r\n/* 给作者信息各加一个margin */\r\n.creatorInfo>*{\r\n    margin-left: .4rem;\r\n}\r\n.creatorInfo>img{\r\n    width: 1rem;\r\n    height: 1rem;\r\n    border-radius: 1.1rem;\r\n    /* 消除margin */\r\n    margin-left: 0; \r\n\r\n}\r\n.creatoor{\r\n    font-size: .45rem;\r\n    font-weight: 600;\r\n}\r\n.createTime{\r\n    font-size: .3rem;\r\n    font-weight: 600;\r\n}\r\n/* 标签部分+简介部分 */\r\n.context-wrap>p{\r\n    /* 设置字体大小 */\r\n    font-size: .3rem;\r\n    /* 设置高度和居中 */\r\n    /* height: .5rem; */\r\n    line-height: .5rem;\r\n    /* 设置文字向左靠 */\r\n    text-align: left;\r\n    /* 设置粗度 */\r\n    font-weight: 600;\r\n}\r\n/* 标签部分的标签 */\r\n.el-tag{\r\n    color: #626e8ae6;\r\n    margin-left: .2rem;\r\n    \r\n}\r\n/* 歌单简介信息部分 */\r\n\r\n\r\n@import \"../../assets/css/table_text.css\";\r\n/* bottom部分 */\r\n.bottom-card{\r\n    margin-top: 1rem;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}