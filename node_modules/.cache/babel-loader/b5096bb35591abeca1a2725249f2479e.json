{"ast":null,"code":"export default {\n  name: 'SongDetail',\n\n  data() {\n    return {\n      detailId: window.sessionStorage.getItem('songListId'),\n      // 从sessionStorage中获取所点击的歌单id\n      playlist: {// creator:{} <!--解决数据找不到报错-->\n      },\n      //用于存放单个歌单数据的对象\n      songs: []\n    };\n  },\n\n  methods: {\n    async getDetail() {\n      //获取单个歌单的列表信息\n      const {\n        data: res\n      } = await this.$http.get('/playlist/detail', {\n        //(解构赋值)获取具体id对应歌单列表信息\n        params: {\n          id: this.detailId\n        }\n      });\n      this.playlist = res.playlist;\n      const {\n        data: res_1\n      } = await this.$http.get('/playlist/track/all', {\n        params: {\n          id: this.detailId\n        }\n      });\n      this.songs = res_1.songs;\n      console.log(res_1); // console.log(this.playlist)\n    },\n\n    tableRowClassName(_ref) {\n      let {\n        row,\n        rowIndex\n      } = _ref;\n\n      //设置table的样式\n      if (rowIndex % 2 === 0) {\n        // console.log(rowIndex)\n        return 'warning-row';\n      } else if (rowIndex % 2 === 1) {\n        return 'success-row';\n      }\n\n      return '';\n    },\n\n    getMusicUrl(row) {\n      this.getMusicUrlNext(row.id, row.dt);\n    },\n\n    async getMusicUrlNext(id, br) {\n      const res = await this.getMuslicGlobal(id, br);\n\n      if (res !== 'ok') {\n        this.$message('sorry');\n      }\n    }\n\n  },\n\n  created() {\n    //路由创建时候执行\n    this.getDetail();\n  }\n\n};","map":{"version":3,"mappings":"AAwCA;EACAA,kBADA;;EAEAC;IACA;MACAC,qDADA;MACA;MACAC,WACA;MADA,CAFA;MAIA;MACAC;IALA;EAOA,CAVA;;EAWAC;IACA;MAAA;MACA;QAAAJ;MAAA;QAAA;QACAK;UACAC;QADA;MADA;MAKA;MACA;QAAAN;MAAA;QACAK;UACAC;QADA;MADA;MAKA;MACAC,mBAbA,CAcA;IACA,CAhBA;;IAiBAC;MAAA;QAAAC;QAAAC;MAAA;;MAAA;MAEA;QACA;QACA;MACA,CAHA,MAGA;QACA;MACA;;MACA;IACA,CA1BA;;IA2BAC;MACA;IAEA,CA9BA;;IA+BA;MACA;;MACA;QACA;MACA;IACA;;EApCA,CAXA;;EAkDAC;IAAA;IACA;EACA;;AApDA","names":["name","data","detailId","playlist","songs","methods","params","id","console","tableRowClassName","row","rowIndex","getMusicUrl","created"],"sourceRoot":"src/components/songlistdetail","sources":["SongDetail.vue"],"sourcesContent":["<template>\n  <div>\n    <el-card class=\"box-card\">\n        <div class=\"header\">\n            <div class=\"icon-wrap\"><img :src=\"playlist.backgroundCoverUrl\" alt=\"\" ></div>\n            <div class=\"context-wrap\">\n                <span>{{playlist.name}}</span>\n                <div v-if=\"playlist.creator\" class=\"creatorInfo\">   <!--解决数据找不到报错：用v-if控制是否渲染-->\n                    <img :src=\"playlist.creator.avatarUrl\" alt=\"\">\n                    <span class=\"creatoor\">{{playlist.creator.nickname}}</span>\n                    <span class=\"createTime\">{{playlist.createTime | dataFormat}} 创建</span>\n                </div>\n                <!--v-if让有数据了再统一显示-->\n                <p v-if=\"playlist.tags\"><span>标签：</span><el-tag v-for=\"(item,index) in playlist.tags\" :key=\"index\">{{item}}</el-tag></p>\n                <p v-if=\"playlist.description\"><span>简介：</span><span>{{playlist.description}}</span></p>\n            </div>\n        </div>\n        <div></div>\n    </el-card>\n    <el-card class=\"box-card bottom-card\">\n        <el-tabs>\n            <el-tab-pane label=\"歌单列表\" >\n                <el-table  :data=\"songs\" :row-class-name=\"tableRowClassName\" class=\"customer-table\" @row-dblclick=\"getMusicUrl\">\n                    <el-table-column label=\"歌名\" prop=\"name\"></el-table-column>\n                    <el-table-column label=\"歌手\" prop=\"ar[0].name\"></el-table-column>\n                    <el-table-column label=\"专辑\" >\n                        <template slot-scope=\"scope\" ><span class=\"singleStyle\">《{{scope.row.al.name}}》</span></template><!--使用插槽个性化-->\n                    </el-table-column>\n                    <el-table-column label=\"时长\" prop=\"dt\">\n                        <template slot-scope=\"scope\"><span class=\"singleStyle\">{{scope.row.dt | dataFormat1}}</span></template>  <!--使用插槽和全局过滤器-->\n                    </el-table-column>\n                </el-table>\n            </el-tab-pane>\n            <el-tab-pane label=\"评论\"></el-tab-pane>\n        </el-tabs>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n    name:'SongDetail',\n    data(){\n        return{\n            detailId:window.sessionStorage.getItem('songListId'),// 从sessionStorage中获取所点击的歌单id\n            playlist:{\n                // creator:{} <!--解决数据找不到报错-->\n            }, //用于存放单个歌单数据的对象\n            songs:[]\n        }\n    },\n    methods:{\n        async getDetail(){                              //获取单个歌单的列表信息\n            const {data:res}=await this.$http.get('/playlist/detail',{            //(解构赋值)获取具体id对应歌单列表信息\n                params:{\n                        id:this.detailId\n                }\n            })\n            this.playlist=res.playlist\n            const {data:res_1}=await this.$http.get('/playlist/track/all',{\n                params:{\n                    id:this.detailId\n                }\n            })\n            this.songs=res_1.songs\n            console.log(res_1)\n            // console.log(this.playlist)\n        },\n        tableRowClassName({row, rowIndex}) {   //设置table的样式\n            \n        if (rowIndex%2 === 0) {\n            // console.log(rowIndex)\n          return 'warning-row';\n        } else if (rowIndex%2 === 1) {\n          return 'success-row';\n        }\n        return '';\n        },\n        getMusicUrl(row){\n            this.getMusicUrlNext(row.id,row.dt)\n            \n        },\n        async getMusicUrlNext(id,br){\n            const res= await this.getMuslicGlobal(id,br)\n            if(res!=='ok'){\n                this.$message('sorry')\n            }\n        }\n    \n    },\n    created(){   //路由创建时候执行\n        this.getDetail() \n    }\n}\n</script>\n\n<style scoped>\n/* 歌单简介信息部分 */\n.box-card{\n        /* 设置大小 */\n    width: 1200px;\n    /* 设置居中 */\n    margin: 0 auto; \n    background-color: rgb(43,43,43);\n    /* 将自动生成的lineheight为0，让内容撑开 */\n    line-height: 0;  \n    color: rgb(208, 208, 208);\n    border: 0;\n}\n\n.header{\n        /* 设置为flex布局 */\n    display: flex;\n}\n/* 左大img */\n.icon-wrap>img{\n    width: 4.7rem;\n    height: 4.5rem;\n    border-radius: .3rem;\n    \n}\n/* 右区域 */\n.context-wrap{\n    /* header的右边设置为自上而下的flex布局 */\n    display: flex;\n    flex-direction: column;\n}\n.context-wrap>*{\n    margin-left: .4rem;\n}\n.context-wrap>span{\n/* 字体大小 */\n    font-size: .5rem;\n    /* 字体粗度 */\n    font-weight: 700;\n    /* 设置高度和居中 */\n        height: 1rem;\n    line-height: 1rem;\n    /* 设置margin */\n        margin-bottom: .4rem;\n}\n/* 作者信息 */\n.creatorInfo{\n    /* 设置高度和居中 */\n    height: 1rem;\n    line-height: 1rem;\n    /* 设置为flex布局 */\n        display: flex;\n    align-items: center;\n    flex-direction: row;\n\n}\n/* 给作者信息各加一个margin */\n.creatorInfo>*{\n    margin-left: .4rem;\n}\n.creatorInfo>img{\n    width: 1rem;\n    height: 1rem;\n    border-radius: 1.1rem;\n    /* 消除margin */\n    margin-left: 0; \n\n}\n.creatoor{\n    font-size: .45rem;\n    font-weight: 600;\n}\n.createTime{\n    font-size: .3rem;\n    font-weight: 600;\n}\n/* 标签部分+简介部分 */\n.context-wrap>p{\n    /* 设置字体大小 */\n    font-size: .3rem;\n    /* 设置高度和居中 */\n    /* height: .5rem; */\n    line-height: .5rem;\n    /* 设置文字向左靠 */\n    text-align: left;\n    /* 设置粗度 */\n    font-weight: 600;\n}\n/* 标签部分的标签 */\n.el-tag{\n    color: #626e8ae6;\n    margin-left: .2rem;\n    \n}\n/* 歌单简介信息部分 */\n\n\n@import \"../../assets/css/table_text.css\";\n/* bottom部分 */\n.bottom-card{\n    margin-top: 1rem;\n}\n</style>"]},"metadata":{},"sourceType":"module"}