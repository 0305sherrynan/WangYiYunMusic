{"ast":null,"code":"import { nanoid } from 'nanoid';\nexport default {\n  name: 'SongList',\n\n  data() {\n    return {\n      activeName: 0,\n      //用于标志被激活的tab\n      OnePlayLists: {},\n      //用于存储最上方的资源\n      MusicSortLists: [],\n      //存放歌单分类标签\n      MusicSingleList: [],\n      //存放标签所对应资源歌单\n      total: 0,\n      //单个歌单所存储的歌数目\n      currentPage: 1 //当前页页号\n\n    };\n  },\n\n  methods: {\n    handleClick() {\n      //tab被点击时触发获取歌单事件\n      this.OnePlayLists = {};\n      this.MusicSingleList = []; //清空上一次请求的资源存储\n\n      this.getSingleMusic();\n      this.getOnePlayLists();\n    },\n\n    async getOnePlayLists() {\n      //请求最上方资源\n      const res = await this.$http.get('/top/playlist/highquality', {\n        params: {\n          limit: 1,\n          cat: this.MusicSortLists[0].name\n        }\n      }); // console.log(res)\n\n      this.OnePlayLists = res.data.playlists[0]; //获取资源\n    },\n\n    async getMusicSortLists() {\n      //获取歌单种类名\n      const sortLists = await this.$http.get('/playlist/highquality/tags', {\n        params: {\n          limit: 10 //取出的数量为10\n\n        }\n      }); //  console.log(sortLists)\n      //将标签放入array中\n\n      let temp = [];\n      sortLists.data.tags.forEach((element, index) => {\n        if (index <= 9) {\n          this.MusicSortLists.push({\n            id: element.id,\n            name: element.name\n          });\n        }\n      }); //  this.MusicSortLists=temp\n      //  console.log(this.MusicSortLists)\n    },\n\n    async getSingleMusic() {\n      //点击标签时获取对应资源\n      const res = await this.$http.get('/top/playlist', {\n        params: {\n          limit: 12,\n          //取出单页歌单数量\n          offset: (this.currentPage - 1) * 12,\n          //用于分页\n          cat: this.MusicSortLists[this.activeName].name //标签\n\n        }\n      }); // console.log(res)\n      //资源存储\n\n      this.MusicSingleList = res.data.playlists;\n      this.total = res.data.total;\n    },\n\n    handleCurrentChange(val) {\n      //当前页号赋值和再次请求资源和渲染页面\n      this.currentPage = val;\n      this.getSingleMusic();\n    },\n\n    async initLoad() {\n      //定义一个异步函数，放在created中\n      await this.getMusicSortLists();\n      this.getOnePlayLists();\n      this.getSingleMusic();\n    }\n\n  },\n\n  created() {\n    //刚创建路由时候就必须请求资源\n    this.initLoad();\n  },\n\n  computed: {\n    az: function () {\n      return nanoid();\n    }\n  }\n};","map":{"version":3,"mappings":"AAqCA;AACA;EACAA,gBADA;;EAEAC;IACA;MACAC,aADA;MACA;MACAC,gBAFA;MAEA;MACAC,kBAHA;MAGA;MACAC,mBAJA;MAIA;MACAC,QALA;MAKA;MACAC,cANA,CAMA;;IANA;EAQA,CAXA;;EAYAC;IACAC;MAAA;MACA;MACA,0BAFA,CAEA;;MACA;MACA;IACA,CANA;;IAOA;MAAA;MACA;QAAAC;UACAC,QADA;UAEAC;QAFA;MAAA,GADA,CAKA;;MACA,0CANA,CAMA;IACA,CAdA;;IAeA;MAAA;MACA;QACAF;UACAC,SADA,CACA;;QADA;MADA,GADA,CAOA;MACA;;MACA;MACAE;QACA;UACA,yBACA;YACAC,cADA;YAEAd;UAFA,CADA;QAMA;MACA,CATA,EAVA,CAoBA;MACA;IACA,CArCA;;IAsCA;MAAA;MACA;QACAU;UACAC,SADA;UACA;UACAI,mCAFA;UAEA;UACAH,8CAHA,CAGA;;QAHA;MADA,GADA,CAQA;MACA;;MACA;MACA;IAEA,CAnDA;;IAoDAI;MAAA;MACA;MACA;IACA,CAvDA;;IAwDA;MAAA;MACA;MACA;MACA;IACA;;EA5DA,CAZA;;EA0EAC;IAAA;IACA;EACA,CA5EA;;EA6EAC;IACAC;MACA;IACA;EAHA;AA7EA","names":["name","data","activeName","OnePlayLists","MusicSortLists","MusicSingleList","total","currentPage","methods","handleClick","params","limit","cat","sortLists","id","offset","handleCurrentChange","created","computed","az"],"sourceRoot":"src/components/songlist","sources":["SongList.vue"],"sourcesContent":["<template>\r\n  <el-card class=\"box-card\" >\r\n    <!-- 精品菜单区域 -->\r\n    <div  class=\"OnePlayLists\">\r\n        <div class=\"icon-wrap\">\r\n            <img :src=\"OnePlayLists.coverImgUrl\" alt=\"\" class=\"bigImg\">\r\n        </div>\r\n        <div class=\"content-wrap\">\r\n            <div class=\"tag\">精品菜单</div>\r\n            <p class=\"info\">{{OnePlayLists.name}}</p>\r\n            <p class=\"info_bottom\"> {{OnePlayLists.copywriter}}</p>\r\n        </div>\r\n\r\n    </div>\r\n    <!-- 歌单列表展示 -->\r\n    <el-tabs  v-model=\"activeName\" @tab-click=\"handleClick\" >\r\n        <el-tab-pane v-for=\"(item,index) in MusicSortLists\"   :key=\"item.id\" :name=\"index.toString()\" >\r\n             <span slot=\"label\" class=\"tagText\"> {{item.name}}</span>\r\n            <div v-for=\"(item) in MusicSingleList\" :key=\"item.id\" class=\"MusicSingleList_list\" >\r\n                  <img :src=\"item.coverImgUrl\" alt=\"\" class=\"MusicSingleList_img\" @click=\"getSpecialLists(item.id,item)\">  <!--getSpecialLists详情可见global.js-->\r\n                  <span>{{item.name}}</span>\r\n            </div>\r\n        </el-tab-pane>\r\n    </el-tabs>\r\n    <el-pagination\r\n    @current-change=\"handleCurrentChange\"\r\n    :current-page.sync=\"currentPage\"\r\n    :page-size=\"12\"\r\n    layout=\"prev,pager,next\"\r\n    :total=\"total\"\r\n    >\r\n\r\n    </el-pagination>\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nimport {nanoid} from 'nanoid'\r\nexport default {\r\n    name:'SongList',\r\n    data(){\r\n      return{\r\n        activeName:0,  //用于标志被激活的tab\r\n          OnePlayLists:{},//用于存储最上方的资源\r\n          MusicSortLists:[], //存放歌单分类标签\r\n          MusicSingleList:[]  , //存放标签所对应资源歌单\r\n          total:0,              //单个歌单所存储的歌数目\r\n          currentPage:1,        //当前页页号\r\n      }\r\n    },\r\n    methods:{\r\n        handleClick(){  //tab被点击时触发获取歌单事件\r\n        this.OnePlayLists={}\r\n        this.MusicSingleList=[] //清空上一次请求的资源存储\r\n        this.getSingleMusic()\r\n        this.getOnePlayLists()\r\n        },\r\n        async getOnePlayLists(){  //请求最上方资源\r\n            const res=await this.$http.get('/top/playlist/highquality',{params:{\r\n              limit:1,\r\n              cat:this.MusicSortLists[0].name\r\n            }})\r\n            // console.log(res)\r\n            this.OnePlayLists=res.data.playlists[0]  //获取资源\r\n        },\r\n        async getMusicSortLists(){  //获取歌单种类名\r\n           const sortLists=await this.$http.get('/playlist/highquality/tags',{\r\n            params:{\r\n              limit:10,//取出的数量为10\r\n            }\r\n\r\n           })\r\n          //  console.log(sortLists)\r\n          //将标签放入array中\r\n          let temp=[]\r\n           sortLists.data.tags.forEach((element,index) => {\r\n            if(index<=9){\r\n                          this.MusicSortLists.push(\r\n              {\r\n                id:element.id,\r\n                name:element.name\r\n              }\r\n            )\r\n            }\r\n           });\r\n          //  this.MusicSortLists=temp\r\n          //  console.log(this.MusicSortLists)\r\n        },\r\n        async getSingleMusic(){  //点击标签时获取对应资源\r\n          const res=await this.$http.get('/top/playlist',{\r\n                params:{\r\n                  limit:12,//取出单页歌单数量\r\n                  offset:(this.currentPage-1)*12,   //用于分页\r\n                  cat:this.MusicSortLists[this.activeName].name //标签\r\n                }\r\n          })\r\n          // console.log(res)\r\n          //资源存储\r\n          this.MusicSingleList=res.data.playlists \r\n          this.total=res.data.total\r\n           \r\n        },\r\n        handleCurrentChange(val){ //当前页号赋值和再次请求资源和渲染页面\r\n           this.currentPage=val  \r\n           this.getSingleMusic()\r\n        },\r\n        async initLoad(){   //定义一个异步函数，放在created中\r\n          await this.getMusicSortLists()\r\n          this.getOnePlayLists()\r\n          this.getSingleMusic()\r\n        }\r\n    },\r\n    created(){     //刚创建路由时候就必须请求资源\r\n        this.initLoad()\r\n    },\r\n    computed:{\r\n      az:function(){\r\n        return nanoid()\r\n      }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n  .OnePlayLists{\r\n    /* 使用flex布局 */\r\n    display: flex;  \r\n  }\r\n  .OnePlayLists:before,\r\n  .OnePlayLists:after {\r\n    display: table;\r\n    content: \"\";\r\n  }\r\n  .OnePlayLists:after {\r\n    clear: both\r\n  }\r\n\r\n  .box-card {\r\n    /* 设置大小 */\r\n    width: 1200px;\r\n    /* 设置居中 */\r\n    margin: 0 auto; \r\n    background-color: rgb(43, 43, 43);\r\n    /* 将总体的line-height关闭 */\r\n    line-height: 0;\r\n    border: 0px solid red;\r\n  }\r\n\r\n  /* 上方大相片 */\r\n  .bigImg{\r\n    width: 3.2rem;\r\n    height: 3.2rem;\r\n  }\r\n  .icon-wrap{\r\n    /* 清除默认line-height */\r\n    line-height: 0;\r\n  }\r\n /* 精品菜单 */\r\n .tag{\r\n    /* 文字大小 */\r\n    font-size: .32rem;\r\n    /* 文字颜色 */\r\n    color: rgb(201, 153, 93);\r\n    /* 宽度 */\r\n    width: 2rem;\r\n    /* 高度 */\r\n    height: .6rem;\r\n    /* 保证垂直居中 */\r\n    line-height: .6rem;\r\n        /* 文本水平居中 */\r\n    text-align: center;\r\n    /* 边框 */\r\n    border: 1px solid rgb(231, 170, 90);\r\n    border-radius: 40px;\r\n }\r\n  /* 上方文字 */\r\n  .info{\r\n    /*文字大小  */\r\n   font-size: 0.35rem;\r\n   /* 文字颜色 */\r\n   color: white;\r\n   /* 高度和保持垂直居中 */\r\n    height: .2rem;\r\n    line-height: .2rem;\r\n    /* 文本水平居中 */\r\n    text-align: center;\r\n  }\r\n  /* 文字 */\r\n  .info_bottom{\r\n        /*文字大小  */\r\n   font-size: 0.22rem;\r\n   /* 文字颜色 */\r\n   color: rgb(166, 166, 168);\r\n   /* 设置高度和垂直居中 */\r\n    height: .3rem;\r\n    line-height: .3rem;\r\n    /* 文字左对齐 */\r\n    text-align: left;\r\n  }\r\n\r\n  .content-wrap{\r\n    margin-left: .2rem;\r\n  }\r\n\r\n\r\n\r\n/* 歌单资源区 */\r\n.tagText{\r\n  color: rgb(135, 135, 135);\r\n}\r\n.MusicSingleList_img{\r\n  border-radius: .2rem;\r\n  width: 4rem;\r\n  height: 4rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.MusicSingleList_list{\r\n  display: inline-block;\r\n  margin-left: 1rem;\r\n  width: 4rem;\r\n  height: 4rem;\r\n  /* 设置上边距 */\r\n  margin-top: 1rem;\r\n}\r\n.MusicSingleList_list>span{\r\n  color: rgb(208, 208, 208);\r\nwidth: 4rem;\r\n    font-size: .001rem;\r\n    height: 1rem;\r\n    line-height: 1rem;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 1;\r\n    -webkit-box-orient: vertical;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}